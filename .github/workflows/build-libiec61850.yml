name: Build libiec61850 Static Library

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [Ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]
        include:
          - os: ubuntu-latest
            arch: arm
          - os: ubuntu-latest
            arch: arm64
          - os: macos-latest
            arch: arm64
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout current repository
      uses: actions/checkout@v4

    - name: Checkout libiec61850 repository
      uses: actions/checkout@v4
      with:
        repository: mz-automation/libiec61850
        ref: v1.6
        path: libiec61850-source

    - name: Debug git checkout
      run: |
        ls -la libiec61850-source
        git -C libiec61850-source log -1
      shell: bash

    - name: Copy toolchain files
      if: matrix.os == 'Ubuntu-latest' && (matrix.arch == 'arm' || matrix.arch == 'arm64')
      run: |
        mkdir -p libiec61850-source/cmake
        cp cmake/arm-linux-gnueabihf.cmake libiec61850-source/cmake/
        cp cmake/aarch64-linux-gnu.cmake libiec61850-source/cmake/
      shell: bash

    - name: Patch CMakeLists.txt for static library (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        sed -i 's/add_library(iec61850 SHARED/add_library(iec61850 STATIC/' libiec61850-source/src/CMakeLists.txt
        sed -i '/add_library(iec61850 STATIC/a set_target_properties(iec61850 PROPERTIES OUTPUT_NAME libiec61850)' libiec61850-source/src/CMakeLists.txt
        cat libiec61850-source/src/CMakeLists.txt
      shell: bash

    - name: Set up build environment (Ubuntu)
      if: matrix.os == 'Ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
        if [ "${{ matrix.arch }}" = "arm" ]; then
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armel-cross libc6-dev-armhf-cross
        fi
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        fi
      shell: bash

    - name: Set up build environment (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake
        curl -L -o wpcap.zip https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip
        unzip wpcap.zip -d libiec61850-source/third_party/winpcap
      shell: bash

    - name: Set up build environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake
        brew upgrade cmake # Используем последнюю версию CMake
      shell: bash

    - name: Check source directory
      run: |
        if [ ! -d "libiec61850-source" ]; then
          echo "Error: libiec61850-source directory not found"
          exit 1
        fi
      shell: bash

    - name: Configure CMake (Ubuntu x64)
      if: matrix.os == 'Ubuntu-latest' && matrix.arch == 'x64'
      run: |
        mkdir -p libiec61850-source/build
        cd libiec61850-source/build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF -DBUILD_DOCUMENTATION=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../install > cmake_output.txt 2>&1 || (cat cmake_output.txt && exit 1)
      shell: bash

    - name: Configure CMake (Ubuntu arm)
      if: matrix.os == 'Ubuntu-latest' && matrix.arch == 'arm'
      run: |
        mkdir -p libiec61850-source/build
        cd libiec61850-source/build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../cmake/arm-linux-gnueabihf.cmake -DBUILD_EXAMPLES=OFF -DBUILD_DOCUMENTATION=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../install > cmake_output.txt 2>&1 || (cat cmake_output.txt && exit 1)
      shell: bash

    - name: Configure CMake (Ubuntu arm64)
      if: matrix.os == 'Ubuntu-latest' && matrix.arch == 'arm64'
      run: |
        mkdir -p libiec61850-source/build
        cd libiec61850-source/build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../cmake/aarch64-linux-gnu.cmake -DBUILD_EXAMPLES=OFF -DBUILD_DOCUMENTATION=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../install > cmake_output.txt 2>&1 || (cat cmake_output.txt && exit 1)
      shell: bash

    - name: Configure CMake (Windows x64)
      if: matrix.os == 'windows-latest' && matrix.arch == 'x64'
      run: |
        mkdir -p libiec61850-source/build
        cd libiec61850-source/build
        cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF -DBUILD_DOCUMENTATION=OFF -DBUILD_SHARED_LIBS=OFF -D_CRT_SECURE_NO_WARNINGS=ON -DCMAKE_C_FLAGS="/wd4267 /wd4244" -DCMAKE_INSTALL_PREFIX=../install > cmake_output.txt 2>&1 || (cat cmake_output.txt && exit 1)
      shell: bash

    - name: Configure CMake (macOS x64)
      if: matrix.os == 'macos-latest' && matrix.arch == 'x64'
      run: |
        mkdir -p libiec61850-source/build
        cd libiec61850-source/build
        cmake .. -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF -DBUILD_DOCUMENTATION=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../install > cmake_output.txt 2>&1 || (cat cmake_output.txt && exit 1)
      shell: bash

    - name: Configure CMake (macOS arm64)
      if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
      run: |
        mkdir -p libiec61850-source/build
        cd libiec61850-source/build
        cmake .. -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF -DBUILD_DOCUMENTATION=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../install > cmake_output.txt 2>&1 || (cat cmake_output.txt && exit 1)
      shell: bash

    - name: Debug CMake output
      if: failure()
      run: |
        if [ -f "libiec61850-source/build/cmake_output.txt" ]; then
          cat libiec61850-source/build/cmake_output.txt
        else
          echo "CMake output file not found"
        fi
      shell: bash

    - name: Build (Unix)
      if: matrix.os == 'Ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        if [ ! -d "libiec61850-source/build" ]; then
          echo "Error: Build directory not found"
          exit 1
        fi
        cd libiec61850-source/build
        cmake --build . --config Release
      shell: bash

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (!(Test-Path "libiec61850-source/build")) {
          Write-Error "Build directory not found"
          exit 1
        }
        cd libiec61850-source/build
        cmake --build . --config Release
      shell: powershell

    - name: Install library (Unix)
      if: matrix.os == 'Ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        cd libiec61850-source/build
        cmake --install . --config Release
      shell: bash

    - name: Install library (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd libiec61850-source/build
        cmake --install . --config Release
      shell: powershell

    - name: Debug install output
      run: |
        echo "Listing contents of install directory:"
        find libiec61850-source/install -type f || dir libiec61850-source/install /s
      shell: bash

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libiec61850-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          libiec61850-source/install/lib/*
          libiec61850-source/install/include/*
        retention-days: 7